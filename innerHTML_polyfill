<!DOCTYPE html>
<html lang="en">

<head>
  <meta name="viewport" content="width=device-width,initial-scale=1">
  <title>inert polyfill example</title>
  <script src="webcomponents-lite.js"></script>
  
    <script type="text/javascript">
    "use strict";

    var _createClass = (function() {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function(Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);
        if (staticProps) defineProperties(Constructor, staticProps);
        return Constructor;
      };
    })();

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }

    function _possibleConstructorReturn(self, call) {
      if (!self) {
        throw new ReferenceError(
          "this hasn't been initialised - super() hasn't been called"
        );
      }
      return call && (typeof call === "object" || typeof call === "function") ?
        call :
        self;
    }

    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError(
          "Super expression must either be null or a function, not " +
          typeof superClass
        );
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
          value: subClass,
          enumerable: false,
          writable: true,
          configurable: true
        }
      });
      if (superClass)
        Object.setPrototypeOf ?
        Object.setPrototypeOf(subClass, superClass) :
        (subClass.__proto__ = superClass);
    }

    // Create a class for the element
    var XProduct = (function(_HTMLElement) {
      _inherits(XProduct, _HTMLElement);

      function XProduct() {
        _classCallCheck(this, XProduct);

        // Create a shadow root
        var _this = _possibleConstructorReturn(
          this,
          (XProduct.__proto__ || Object.getPrototypeOf(XProduct)).call(this)
        );
        // Always call super first in constructor

        var shadow = _this.attachShadow({
          mode: "open"
        });

        // Create a standard img element and set its attributes.
        var img = document.createElement("img");
        img.alt = _this.getAttribute("data-name");
        img.src = _this.getAttribute("data-img");
        img.width = "150";
        img.height = "150";
        img.className = "product-img";

        // Add the image to the shadow root.
        shadow.appendChild(img);

        // Add an event listener to the image.
        img.addEventListener("click", function() {
          window.location = _this.getAttribute("data-url");
        });

        // Create a link to the product.
        var link = document.createElement("a");
        link.innerText = _this.getAttribute("data-name");
        link.href = _this.getAttribute("data-url");
        link.className = "product-name";

        // Add the link to the shadow root.
        shadow.appendChild(link);
        return _this;
      }

      _createClass(XProduct, [{
          key: "connectedCallback",
          value: function connectedCallback() {
            console.log(this.tagName, "connected");
          }
        },
        {
          key: "disconnectedCallback",
          value: function disconnectedCallback() {
            console.log(this.tagName, "disconnected");
          }
        }
      ]);

      return XProduct;
    })(HTMLElement);

    window.addEventListener('WebComponentsReady', function(e) {
      customElements.define('x-product', XProduct);

      var container = document.createElement('div');
      document.body.appendChild(container);

      container.innerHTML = '<x-product data-img="https://s3-us-west-2.amazonaws.com/s.cdpn.io/4621/python.png"></x-product>';
      container.innerHTML = '';
    });
  </script>
</head>

<body>
</body>

</html>
